// Generated by Avo VERSION 92.16.0. You should never have to make changes to this file.
// If you find yourself in the situation where you have to edit the file please contact us at hi@avo.app.
// If you encounter a git conflict in this file run `avo pull` and it will be resolved automatically.
/* eslint-disable */

  var __AVO_DEV__ = false;
  var __AVO_NOOP__ = false;
  var __AVO_LOGGER__ = null;
  var __AVO_ENV__ = null;
  var __REPORT_FAILURE_AS__ = null;
  var __STRICT__ = null;
const avoInspectorApiKey = "3UWtteG9HenZ825cYoYr";
var __INSPECTOR__ = null;

var array_difference, AvoAssert, InternalAvoLogger;
  array_difference = function array_difference(a1, a2) {
    var result = [];
    for (var i = 0; i < a1.length; i++) {
      if (a2.indexOf(a1[i]) === -1) {
        result.push(a1[i]);
      }
    }
    return result;
  }

  AvoAssert = {
    assertObject: function assertObject(propertyId, propName, obj) {
      if (typeof obj !== 'object') {
        var message = propName +
          ' should be of type object but you provided type ' +
          typeof obj +
          ' with value ' +
          JSON.stringify(obj);
        return [{tag: 'expectedObjectType', propertyId: propertyId, message: message, actualType: typeof obj}];
      } else {
        return [];
      }
    },

    assertString: function assertString(propertyId, propName, str) {
      if (typeof str !== 'string') {
        var message = propName +
          ' should be of type string but you provided type ' +
          typeof str +
          ' with value ' +
          JSON.stringify(str);
        return [{tag: 'expectedStringType', propertyId: propertyId, message: message, actualType: typeof str}];
      } else {
        return [];
      }
    },

    assertInt: function assertInt(propertyId, propName, int) {
      if (typeof int === 'number' && int !== Math.round(int)) {
        var message = propName +
          ' should be of type int but you provided type float with value ' +
          JSON.stringify(int);
        return [{tag: 'expectedIntType', propertyId: propertyId, actualType: 'float'}];
      } else if (typeof int !== 'number') {
        var message = propName +
          ' should be of type int but you provided type ' +
          typeof int +
          ' with value ' +
          JSON.stringify(int);
        return [{tag: 'expectedIntType', propertyId: propertyId, message: message, actualType: typeof int}];
      } else {
        return [];
      }
    },

    assertLong: function assertLong(propertyId, propName, long) {
      if (typeof long === 'number' && long !== Math.round(long)) {
        var message = propName +
          ' should be of type long but you provided type float with value ' +
          JSON.stringify(long);
        return [{tag: 'expectedLongType', propertyId: propertyId, actualType: 'float'}];
      } else if (typeof long !== 'number') {
        var message = propName +
          ' should be of type long but you provided type ' +
          typeof long +
          ' with value ' +
          JSON.stringify(long);
        return [{tag: 'expectedLongType', propertyId: propertyId, message: message, actualType: typeof long}];
      } else {
        return [];
      }
    },

    assertFloat: function assertFloat(propertyId, propName, float) {
      if (typeof float !== 'number') {
        var message = propName +
          ' should be of type float but you provided type ' +
          typeof float +
          ' with value ' +
          JSON.stringify(float);
        return [{tag: 'expectedFloatType', propertyId: propertyId, message: message, actualType: typeof float}];
      } else {
        return [];
      }
    },

    assertBool: function assertBool(propertyId, propName, bool) {
      if (typeof bool !== 'boolean') {
        var message = propName +
          ' should be of type boolean but you provided type ' +
          typeof bool +
          ' with value ' +
          JSON.stringify(bool);
        return [{tag: 'expectedBoolType', propertyId: propertyId, message: message, actualType: typeof bool}];
      } else {
        return [];
      }
    },

    assertMax: function assertMax(propertyId, propName, max, value) {
      if (value > max) {
        var message = propName +
          ' has a maximum value of ' +
          max +
          ' but you provided the value ' +
          JSON.stringify(value);
        return [{tag: 'expectedMax', propertyId: propertyId, message: message}];
      } else {
        return [];
      }
    },

    assertMin: function assertMin(propertyId, propName, min, value) {
      if (value < min) {
        var message = propName +
          ' has a minimum value of ' +
          min +
          ' but you provided the value ' +
          JSON.stringify(value);
        return [{tag: 'expectedMin', propertyId: propertyId, message: message}];
      } else {
        return [];
      }
    },

    assertList: function assertList(propertyId, propName, value) {
      if (!Array.isArray(value)) {
        var message = propName + ' should be of type list but you provided type ' + typeof value;
        return [{tag: 'expectedList', propertyId: propertyId, message: message, actualType: typeof value}];
      } else {
        return [];
      }
    },

    assertNoAdditionalProperties: function assertNoAdditionalProperties(eventName, input, spec) {
      var additionalKeys = array_difference(input, spec);
      if (additionalKeys.length) {
        var message = "Additional properties when sending event " + eventName + ": " + JSON.stringify(additionalKeys);
        return [{tag: 'expectedNoAdditionalProperties', additionalProperties: additionalKeys, message: message}];
      } else {
        return [];
      }
    },

    assertNoAdditionalUserProperties: function assertNoAdditionalProperties(eventName, input, spec) {
      var additionalKeys = array_difference(input, spec);
      if (additionalKeys.length) {
        var message = "Additional user properties when sending event " + eventName + ": " + JSON.stringify(additionalKeys);
        return [{tag: 'expectedNoAdditionalUserProperties', additionalProperties: additionalKeys, message: message}];
      } else {
        return [];
      }
    }
  };

  InternalAvoLogger = {
    logEventSent: function logEventSent(eventName, eventProperties, userProperties, groupProperties) {
      const message = "Event Sent:" + eventName + "Event Props:" + JSON.stringify(eventProperties) + "User Props:" + JSON.stringify(userProperties) + "Group Props:" + JSON.stringify(groupProperties);

      if (__AVO_LOGGER__ && __AVO_LOGGER__.logDebug && __AVO_LOGGER__.logDebug(__AVO_ENV__, message)) {
        return
      }
      typeof console !== 'undefined' && console.log("[avo] Event Sent:", eventName, "Event Props:", eventProperties, "User Props:", userProperties, "Group Props:", groupProperties);
    },

    log: function log(message) {
      if (__AVO_LOGGER__ && __AVO_LOGGER__.logDebug && __AVO_LOGGER__.logDebug(__AVO_ENV__, message)) {
        return
      }
      typeof console !== 'undefined' && console.log("[avo] " + message);
    },

    warn: function warn(message) {
      if (__AVO_LOGGER__ && __AVO_LOGGER__.logWarn && __AVO_LOGGER__.logWarn(__AVO_ENV__, message)) {
        return
      }
      typeof console !== 'undefined' && console.warn("[avo] " + message);
    },

    error: function error(message, error) {
      if (__AVO_LOGGER__ && __AVO_LOGGER__.logError && __AVO_LOGGER__.logError(__AVO_ENV__, message + error)) {
        return
      }
      typeof console !== 'undefined' && console.error("[avo] " + message, error);
    }
  };

var _avo_invoke, _avo_invoke_meta;
var _avo_sampling_rate = 1.0;
function _avo_invoke_payload(body) {
  if (_avo_sampling_rate > 0) {
    if (Math.random() < _avo_sampling_rate) {
      const data = JSON.stringify(body);
      var options = {
        hostname: 'api.avo.app',
        port: 443,
        path: '/i',
        method: 'POST',
        headers: {
          'Content-Type': 'application/json',
          'Content-Length': Buffer.byteLength(data)
        }
      };
      var req = require('https').request(options, (res) => {
        const chunks = [];
        res.on('data', (data) => chunks.push(data));
        res.on('end', () => {
          try {
            const data = JSON.parse(Buffer.concat(chunks));
            _avo_sampling_rate = data.sa;
          } catch(e) {}
        });
      });
      req.write(data);
      req.on('error', () => { });
      req.end();
    }
  }
}

_avo_invoke = function _avo_invoke(env, eventId, hash, messages, origin) {
  try {
    _avo_invoke_payload({
      "ac": "0PwMjPaMtkOkKQpGoQev",
      "br": "master",
      "en": env,
      "ev": eventId,
      "ha": hash,
      "sc": "fwtXqAc0fCLy7b7oGW40",
      "se": (new Date()).toISOString(),
      "so": "xOUFa-ew2",
      "va": messages.length === 0,
      "me": messages,
      "or": origin
    });
  } catch (e) { if (env !== 'prod') { throw e; } else { InternalAvoLogger.error("", e); } }
}

_avo_invoke_meta = function _avo_invoke_meta(env, type, messages, origin) {
  try {
    _avo_invoke_payload({
      "ac": "0PwMjPaMtkOkKQpGoQev",
      "br": "master",
      "en": env,
      "ty": type,
      "sc": "fwtXqAc0fCLy7b7oGW40",
      "se": (new Date()).toISOString(),
      "so": "xOUFa-ew2",
      "va": messages.length === 0,
      "me": messages,
      "or": origin
    });
  } catch (e) { if (env !== 'prod') { throw e; } else { InternalAvoLogger.error("", e); } }
}


var SignInError = {
  UNKNOWN: "Unknown",
  WRONG_PASSWORD: "Wrong Password",
  USER_NOT_FOUND: "User Not Found",
  USER_DISABLED: "User Disabled",
  INVALID_EMAIL: "Invalid Email",
};

var Client = {
  CLOUD_FUNCTIONS: "Cloud Functions",
  WEB: "Web",
  LANDING_PAGE: "Landing Page",
  CLI: "Cli",
  WEB_DEBUGGER: "Web Debugger",
  ANDROID_DEBUGGER: "Android Debugger",
  IOS_DEBUGGER: "Ios Debugger",
  REACT_NATIVE_DEBUGGER_IOS: "React Native Debugger (ios)",
  REACT_NATIVE_DEBUGGER_ANDROID: "React Native Debugger (android)",
  DOCS: "Docs",
  PUBLISHING_WORKER: "Publishing Worker",
};

var AuthenticationMethod = {
  GOOGLE: "Google",
  EMAIL: "Email",
  SSO: "SSO",
};

var CliAction = {
  LOGIN: "Login",
  LOGOUT: "Logout",
  PULL: "Pull",
  CHECKOUT: "Checkout",
  INIT: "Init",
  STATUS: "Status",
  BRANCH: "Branch",
  EDIT: "Edit",
  WHOAMI: "Whoami",
  SOURCE: "Source",
  SOURCE_ADD: "Source Add",
  SOURCE_REMOVE: "Source Remove",
  MERGE: "Merge",
  CONFLICT: "Conflict",
};

function assertSignInError(signInError, label_) {
  var messages = [];
  messages = messages.concat(AvoAssert.assertString("106d4596-7330-49f3-93d8-487c92f877d3", label_ ? "Sign In Error" + ": " + label_ : "Sign In Error", signInError));
  if ("Unknown" !== signInError && "Wrong Password" !== signInError &&
        "User Not Found" !== signInError &&
        "User Disabled" !== signInError && "Invalid Email" !== signInError) {
    var message = (label_ ? "Sign In Error" + ": " + label_ : "Sign In Error") + " should match one of the following values [ Unknown | Wrong Password | User Not Found | User Disabled | Invalid Email ] but you provided the value " + signInError
    messages = messages.concat([{tag: 'expectedStringMatch', propertyId: "106d4596-7330-49f3-93d8-487c92f877d3", message: message}]);
  }
  return messages;
}

function assertVersion(version, label_) {
  var messages = [];
  messages = messages.concat(AvoAssert.assertString("2fad5bf3-7782-49a2-acc2-825daf823095", label_ ? "Version" + ": " + label_ : "Version", version));
  return messages;
}

function assertSchemaId(schemaId, label_) {
  var messages = [];
  messages = messages.concat(AvoAssert.assertString("40958e87-d69a-4d5a-98f8-b36922466787", label_ ? "Schema Id" + ": " + label_ : "Schema Id", schemaId));
  return messages;
}

function assertOptionalEmailInput(emailInput, label_) {
  var messages = [];
  if (emailInput !== undefined && emailInput !== null) {
    messages = messages.concat(AvoAssert.assertString("439349b2-72cb-4ac1-81d9-1c4aa89da524", label_ ? "Email Input" + ": " + label_ : "Email Input", emailInput));
  }
  return messages;
}

function assertEmail(email, label_) {
  var messages = [];
  messages = messages.concat(AvoAssert.assertString("92588d93-5307-4fa2-be00-be0821596abe", label_ ? "Email" + ": " + label_ : "Email", email));
  return messages;
}

function assertClient(client, label_) {
  var messages = [];
  messages = messages.concat(AvoAssert.assertString("9e5c4ff5-d5f6-4e82-b061-d5fa02755aae", label_ ? "Client" + ": " + label_ : "Client", client));
  if ("Cloud Functions" !== client && "Web" !== client &&
        "Landing Page" !== client && "Cli" !== client &&
        "Web Debugger" !== client && "Android Debugger" !== client &&
        "Ios Debugger" !== client &&
        "React Native Debugger (ios)" !== client &&
        "React Native Debugger (android)" !== client && "Docs" !== client &&
        "Publishing Worker" !== client) {
    var message = (label_ ? "Client" + ": " + label_ : "Client") + " should match one of the following values [ Cloud Functions | Web | Landing Page | Cli | Web Debugger | Android Debugger | Ios Debugger | React Native Debugger (ios) | React Native Debugger (android) | Docs | Publishing Worker ] but you provided the value " + client
    messages = messages.concat([{tag: 'expectedStringMatch', propertyId: "9e5c4ff5-d5f6-4e82-b061-d5fa02755aae", message: message}]);
  }
  return messages;
}

function assertBranchName(branchName, label_) {
  var messages = [];
  messages = messages.concat(AvoAssert.assertString("9xcXzuN-3", label_ ? "Branch Name" + ": " + label_ : "Branch Name", branchName));
  return messages;
}

function assertCliInvokedByCi(cliInvokedByCi, label_) {
  var messages = [];
  messages = messages.concat(AvoAssert.assertBool("IyaXHTG7C", label_ ? "Cli Invoked by Ci" + ": " + label_ : "Cli Invoked by Ci", cliInvokedByCi));
  return messages;
}

function assertAuthenticationMethod(authenticationMethod, label_) {
  var messages = [];
  messages = messages.concat(AvoAssert.assertString("R9pE83vdh", label_ ? "Authentication Method" + ": " + label_ : "Authentication Method", authenticationMethod));
  if ("Google" !== authenticationMethod &&
        "Email" !== authenticationMethod && "SSO" !== authenticationMethod) {
    var message = (label_ ? "Authentication Method" + ": " + label_ : "Authentication Method") + " should match one of the following values [ Google | Email | SSO ] but you provided the value " + authenticationMethod
    messages = messages.concat([{tag: 'expectedStringMatch', propertyId: "R9pE83vdh", message: message}]);
  }
  return messages;
}

function assertCliAction(cliAction, label_) {
  var messages = [];
  messages = messages.concat(AvoAssert.assertString("YRq1Pt0ey", label_ ? "Cli Action" + ": " + label_ : "Cli Action", cliAction));
  if ("Login" !== cliAction && "Logout" !== cliAction &&
        "Pull" !== cliAction && "Checkout" !== cliAction &&
        "Init" !== cliAction && "Status" !== cliAction &&
        "Branch" !== cliAction && "Edit" !== cliAction &&
        "Whoami" !== cliAction && "Source" !== cliAction &&
        "Source Add" !== cliAction && "Source Remove" !== cliAction &&
        "Merge" !== cliAction && "Conflict" !== cliAction) {
    var message = (label_ ? "Cli Action" + ": " + label_ : "Cli Action") + " should match one of the following values [ Login | Logout | Pull | Checkout | Init | Status | Branch | Edit | Whoami | Source | Source Add | Source Remove | Merge | Conflict ] but you provided the value " + cliAction
    messages = messages.concat([{tag: 'expectedStringMatch', propertyId: "YRq1Pt0ey", message: message}]);
  }
  return messages;
}

function assertOptionalSchemaName(schemaName, label_) {
  var messages = [];
  if (schemaName !== undefined && schemaName !== null) {
    messages = messages.concat(AvoAssert.assertString("a49af1dc-3166-45db-a906-86179135854b", label_ ? "Schema Name" + ": " + label_ : "Schema Name", schemaName));
  }
  return messages;
}

function _assertUserId_(userId_, label_) {
  var messages = [];
  messages = messages.concat(AvoAssert.assertString("avo-enriched-server-user-id", label_ ? "User Id" + ": " + label_ : "User Id", userId_));
  return messages;
}

function assertUserId_(userId_, label_) {
  var messages = [];
  messages = messages.concat(AvoAssert.assertString("avo-enriched-type-user-id", label_ ? "User Id" + ": " + label_ : "User Id", userId_));
  return messages;
}

function assertBranchId(branchId, label_) {
  var messages = [];
  messages = messages.concat(AvoAssert.assertString("tlrUtYcti", label_ ? "Branch Id" + ": " + label_ : "Branch Id", branchId));
  return messages;
}

function assertOptionalForce(force, label_) {
  var messages = [];
  if (force !== undefined && force !== null) {
    messages = messages.concat(AvoAssert.assertBool("xSnIO4dt8", label_ ? "Force" + ": " + label_ : "Force", force));
  }
  return messages;
}

function setAvoLogger(avoLogger) {
  __AVO_LOGGER__ = avoLogger;
}

var sysClient;
var sysVersion;

function setSystemProperties(properties) {
  if (properties.client !== null && properties.client !== undefined) {
    sysClient = properties.client;
    assertClient(sysClient);
  }
  if (properties.version !== null && properties.version !== undefined) {
    sysVersion = properties.version;
    assertVersion(sysVersion);
  }
}

function setSystemProperties_(properties) {
  if (properties.client !== null && properties.client !== undefined) {
    sysClient = properties.client;
    assertClient(sysClient);
  }
  if (properties.version !== null && properties.version !== undefined) {
    sysVersion = properties.version;
    assertVersion(sysVersion);
  }
}


var CustomNodeJS;
function setup_(options, systemProperties, CustomNodeJSDestination,
  destinationOptions) {
  if (options.validateProperties === true) {
    __AVO_DEV__ = true;
  }

  setSystemProperties_(systemProperties);

  destinationOptions = destinationOptions || {};

  if (!__AVO_NOOP__) {
    if (options.useProductionKey) {
    } else {
    }

    CustomNodeJS = CustomNodeJSDestination;
    CustomNodeJS.make(options.useProductionKey);
    if (__AVO_DEV__) {
      // debug console in Avo
      _avo_invoke_meta(__AVO_ENV__, 'setup', [], 'setup');
    }
  }
}

function initAvo(options, systemProperties, destinationOptions,
  CustomNodeJSDestination) {
  if (__AVO_ENV__ !== null) {
    return;
  }
  __AVO_ENV__ = options.env.toLowerCase();
  if (options.avoLogger !== undefined) {
    __AVO_LOGGER__ = options.avoLogger;
  }
  if (options.noop === true) {
    __AVO_NOOP__ = true;
  }
  if (__AVO_NOOP__ && __AVO_ENV__ == 'prod') {
    InternalAvoLogger.warn("****************************************************");
    InternalAvoLogger.warn("WARNING Avo cannot be initialized in noop mode in production:");
    InternalAvoLogger.warn("- Overwriting configuration with noop=false.");
    InternalAvoLogger.warn("- Please reach out if you want to be able to run Avo in production mode with noop=true");
    InternalAvoLogger.warn("****************************************************");
    __AVO_NOOP__ = false;
  }
  if (__AVO_NOOP__) {
    InternalAvoLogger.log("****************************************************");
    InternalAvoLogger.log("Avo is now initialized in noop mode. This means:");
    InternalAvoLogger.log("- No events will be sent");
    InternalAvoLogger.log("- No network requests are made");
    InternalAvoLogger.log("****************************************************");
  }
  if (options.strict !== undefined) {
    __STRICT__ = options.strict !== false;
  }
  if (options.reportFailureAs !== undefined) {
    __REPORT_FAILURE_AS__ = options.reportFailureAs;
  }
  if (!__AVO_NOOP__ && options.inspector !== undefined) {
    __INSPECTOR__ = options.inspector;
  } else if (__AVO_ENV__ !== 'prod') {
    InternalAvoLogger.warn("Avo Inspector not provided in initAvo() call");
  }
  if (__AVO_ENV__ !== 'prod') {
    __AVO_DEV__ = true;
  }

  setSystemProperties(systemProperties);

  destinationOptions = destinationOptions || {};

  if (!__AVO_NOOP__) {
    if (__AVO_ENV__ === 'prod') {
    }
    if (__AVO_ENV__ === 'dev') {
    }

    CustomNodeJS = CustomNodeJSDestination;
    if (__AVO_ENV__ === 'prod') {
      CustomNodeJS.make && CustomNodeJS.make(__AVO_ENV__, "2");
    } else if (__AVO_ENV__ === 'dev') {
      CustomNodeJS.make && CustomNodeJS.make(__AVO_ENV__, "1");
    } else {
      console[__REPORT_FAILURE_AS__ || 'error']("[avo] No staging key is set for Custom Node JS. Head to destination settings in Avo to set a staging key.");
      CustomNodeJS.make && CustomNodeJS.make(__AVO_ENV__, "");
    }
    if (__AVO_DEV__) {
      // debug console in Avo
      _avo_invoke_meta(__AVO_ENV__, 'init', [], 'init');
    }
  }
}

/**
 * Signed In: Sent when user successfully signs in or when we successfully authenticate a user.
 *
 * @param {object} properties - the properties associatied with this event
 * @param {string} properties.userId_ - The value used to identify the user. Make sure it's a unique sequence of characters used to identify the user.
 * @param {string} properties.email - The user's email
 * @param {string} properties.authenticationMethod - Type of authentication method used by user logging in or signing up
 *
 * @see {@link https://www.avo.app/schemas/fwtXqAc0fCLy7b7oGW40/events/54e92613-090c-4f0b-afeb-ed720eff3422}
 */
export function signedIn(properties) {
  properties = properties || {};
  if (__AVO_DEV__) {
    // assert properties
    var messages = [];
    messages = messages.concat(assertUserId_(properties.userId_));
    messages = messages.concat(assertEmail(properties.email));
    messages = messages.concat(assertAuthenticationMethod(properties.authenticationMethod));
    messages = messages.concat(assertClient(sysClient));
    messages = messages.concat(assertVersion(sysVersion));
    messages = messages.concat(AvoAssert.assertNoAdditionalProperties("Signed In", Object.keys(properties), [
      "userId_",
      "email",
      "authenticationMethod"
    ]));
    // debug console in Avo
    if (!__AVO_NOOP__) {
      _avo_invoke(__AVO_ENV__, "54e92613-090c-4f0b-afeb-ed720eff3422", "2fec10106ad560f43f307ffdc820e3bd7a474585f9c62ee39961730c35694cb1", messages.map(function(m) { return Object.assign({}, {tag: m.tag, propertyId: m.propertyId, additionalProperties: m.additionalProperties, actualType: m.actualType}); }), 'event');
    }

    InternalAvoLogger.logEventSent("Signed In", {
      "Authentication Method": properties.authenticationMethod,
      "Client": sysClient,
      "Version": sysVersion,
      }, {
      "Email": properties.email,
      }, {});
    if (__AVO_DEV__ && (__STRICT__ === null || __STRICT__)) {
      // throw exception if messages is not empty
      if (messages.length !== 0) {
        throw new Error("Error sending event 'Signed In': " + messages[0].message)
      }
    } else {
      messages.forEach(function(m) {
        console[__REPORT_FAILURE_AS__ || 'error']("[avo] " + m.message);
      });
    }
  }

  if (!__AVO_NOOP__) {
    return Promise.all([
      // report to Avo Inspector
      __INSPECTOR__ != null ? __INSPECTOR__._avoFunctionTrackSchemaFromEvent("Signed In", {
        "Authentication Method": properties.authenticationMethod,
        "Client": sysClient,
        "Version": sysVersion,
        }, "54e92613-090c-4f0b-afeb-ed720eff3422", "2fec10106ad560f43f307ffdc820e3bd7a474585f9c62ee39961730c35694cb1")
      : Promise.resolve(),
      // destination CustomNodeJS
      CustomNodeJS.setUserProperties(properties.userId_, {
        "Email": properties.email,
        }),
      CustomNodeJS.logEvent(properties.userId_, "Signed In", {
        "Authentication Method": properties.authenticationMethod,
        "Client": sysClient,
        "Version": sysVersion,
        }),
    ]);
  } else {
    // do nothing
    return new Promise((resolve) => { resolve(null); });
  }
}

/**
 * Sign In Failed: Sent when sign in request fails.
 *
 * @param {object} properties - the properties associatied with this event
 * @param {string} properties.userId_ - User Id is required for server sources.
 * @param {string} properties.signInError - no description
 * @param {string} properties.emailInput - The email address that is put into the email input on the landing page
 *
 * @see {@link https://www.avo.app/schemas/fwtXqAc0fCLy7b7oGW40/events/7aa64217-bb89-44f5-9a68-f3bc0255a864}
 */
export function signInFailed(properties) {
  properties = properties || {};
  if (__AVO_DEV__) {
    // assert properties
    var messages = [];
    messages = messages.concat(assertUserId_(properties.userId_));
    messages = messages.concat(assertSignInError(properties.signInError));
    messages = messages.concat(assertOptionalEmailInput(properties.emailInput));
    messages = messages.concat(assertClient(sysClient));
    messages = messages.concat(assertVersion(sysVersion));
    messages = messages.concat(AvoAssert.assertNoAdditionalProperties("Sign In Failed", Object.keys(properties), [
      "userId_",
      "signInError",
      "emailInput"
    ]));
    // debug console in Avo
    if (!__AVO_NOOP__) {
      _avo_invoke(__AVO_ENV__, "7aa64217-bb89-44f5-9a68-f3bc0255a864", "ddc8c1ee0b5dbe58efd0d44d6d4dd8c2bc61bf1d64c7c8f74ea1f50d5b24b2ed", messages.map(function(m) { return Object.assign({}, {tag: m.tag, propertyId: m.propertyId, additionalProperties: m.additionalProperties, actualType: m.actualType}); }), 'event');
    }

    InternalAvoLogger.logEventSent("Sign In Failed", {
      "Sign In Error": properties.signInError,
      "Email Input": properties.emailInput,
      "Client": sysClient,
      "Version": sysVersion,
      }, {}, {});
    if (__AVO_DEV__ && (__STRICT__ === null || __STRICT__)) {
      // throw exception if messages is not empty
      if (messages.length !== 0) {
        throw new Error("Error sending event 'Sign In Failed': " + messages[0].message)
      }
    } else {
      messages.forEach(function(m) {
        console[__REPORT_FAILURE_AS__ || 'error']("[avo] " + m.message);
      });
    }
  }

  if (!__AVO_NOOP__) {
    return Promise.all([
      // report to Avo Inspector
      __INSPECTOR__ != null ? __INSPECTOR__._avoFunctionTrackSchemaFromEvent("Sign In Failed", {
        "Sign In Error": properties.signInError,
        "Email Input": properties.emailInput,
        "Client": sysClient,
        "Version": sysVersion,
        }, "7aa64217-bb89-44f5-9a68-f3bc0255a864", "ddc8c1ee0b5dbe58efd0d44d6d4dd8c2bc61bf1d64c7c8f74ea1f50d5b24b2ed")
      : Promise.resolve(),
      // destination CustomNodeJS
      CustomNodeJS.logEvent(properties.userId_, "Sign In Failed", {
        "Sign In Error": properties.signInError,
        "Email Input": properties.emailInput,
        "Client": sysClient,
        "Version": sysVersion,
        }),
    ]);
  } else {
    // do nothing
    return new Promise((resolve) => { resolve(null); });
  }
}

/**
 * Cli Invoked: Sent when any action is made in the CLI.
 *
 * @param {object} properties - the properties associatied with this event
 * @param {string} properties.userId_ - User Id is required for server sources.
 * @param {string} properties.cliAction - no description
 * @param {string} properties.schemaId - The ID of the schema that this event is related to.
 * @param {bool} properties.cliInvokedByCi - True iff process.env.CI is set.
 * @param {string} properties.branchId - The ID of the branch that this event is related to.
 * @param {string} properties.branchName - The name of the branch that this event is related to.
 * @param {string} properties.schemaName - Name of the schema that this event is related to.
 * @param {bool} properties.force - Whether the command was called with --force parameter
 *
 * @see {@link https://www.avo.app/schemas/fwtXqAc0fCLy7b7oGW40/events/qqpIQEK11}
 */
export function cliInvoked(properties) {
  properties = properties || {};
  if (__AVO_DEV__) {
    // assert properties
    var messages = [];
    messages = messages.concat(assertUserId_(properties.userId_));
    messages = messages.concat(assertCliAction(properties.cliAction));
    messages = messages.concat(assertSchemaId(properties.schemaId));
    messages = messages.concat(assertCliInvokedByCi(properties.cliInvokedByCi));
    messages = messages.concat(assertBranchId(properties.branchId));
    messages = messages.concat(assertBranchName(properties.branchName));
    messages = messages.concat(assertOptionalSchemaName(properties.schemaName));
    messages = messages.concat(assertOptionalForce(properties.force));
    messages = messages.concat(assertClient(sysClient));
    messages = messages.concat(assertVersion(sysVersion));
    messages = messages.concat(AvoAssert.assertNoAdditionalProperties("Cli Invoked", Object.keys(properties), [
      "userId_",
      "cliAction",
      "schemaId",
      "cliInvokedByCi",
      "branchId",
      "branchName",
      "schemaName",
      "force"
    ]));
    // debug console in Avo
    if (!__AVO_NOOP__) {
      _avo_invoke(__AVO_ENV__, "qqpIQEK11", "2c085b5b559ba4f21772aefcc05d8169572edea6375b711f3cb6a547445ffb2c", messages.map(function(m) { return Object.assign({}, {tag: m.tag, propertyId: m.propertyId, additionalProperties: m.additionalProperties, actualType: m.actualType}); }), 'event');
    }

    InternalAvoLogger.logEventSent("Cli Invoked", {
      "Cli Action": properties.cliAction,
      "Schema Id": properties.schemaId,
      "Cli Invoked by Ci": properties.cliInvokedByCi,
      "Branch Id": properties.branchId,
      "Branch Name": properties.branchName,
      "Schema Name": properties.schemaName,
      "Force": properties.force,
      "Client": sysClient,
      "Version": sysVersion,
      }, {}, {});
    if (__AVO_DEV__ && (__STRICT__ === null || __STRICT__)) {
      // throw exception if messages is not empty
      if (messages.length !== 0) {
        throw new Error("Error sending event 'Cli Invoked': " + messages[0].message)
      }
    } else {
      messages.forEach(function(m) {
        console[__REPORT_FAILURE_AS__ || 'error']("[avo] " + m.message);
      });
    }
  }

  if (!__AVO_NOOP__) {
    return Promise.all([
      // report to Avo Inspector
      __INSPECTOR__ != null ? __INSPECTOR__._avoFunctionTrackSchemaFromEvent("Cli Invoked", {
        "Cli Action": properties.cliAction,
        "Schema Id": properties.schemaId,
        "Cli Invoked by Ci": properties.cliInvokedByCi,
        "Branch Id": properties.branchId,
        "Branch Name": properties.branchName,
        "Schema Name": properties.schemaName,
        "Force": properties.force,
        "Client": sysClient,
        "Version": sysVersion,
        }, "qqpIQEK11", "2c085b5b559ba4f21772aefcc05d8169572edea6375b711f3cb6a547445ffb2c")
      : Promise.resolve(),
      // destination CustomNodeJS
      CustomNodeJS.logEvent(properties.userId_, "Cli Invoked", {
        "Cli Action": properties.cliAction,
        "Schema Id": properties.schemaId,
        "Cli Invoked by Ci": properties.cliInvokedByCi,
        "Branch Id": properties.branchId,
        "Branch Name": properties.branchName,
        "Schema Name": properties.schemaName,
        "Force": properties.force,
        "Client": sysClient,
        "Version": sysVersion,
        }),
    ]);
  } else {
    // do nothing
    return new Promise((resolve) => { resolve(null); });
  }
}

/**
 * Cli Installed: Event sent when the CLI is successfully installed
 *
 * @param {object} properties - the properties associatied with this event
 * @param {string} properties.userId_ - User Id is required for server sources.
 * @param {bool} properties.cliInvokedByCi - True iff process.env.CI is set.
 *
 * @see {@link https://www.avo.app/schemas/fwtXqAc0fCLy7b7oGW40/events/JCwfVYXTS}
 */
export function cliInstalled(properties) {
  properties = properties || {};
  if (__AVO_DEV__) {
    // assert properties
    var messages = [];
    messages = messages.concat(assertUserId_(properties.userId_));
    messages = messages.concat(assertCliInvokedByCi(properties.cliInvokedByCi));
    messages = messages.concat(assertClient(sysClient));
    messages = messages.concat(assertVersion(sysVersion));
    messages = messages.concat(AvoAssert.assertNoAdditionalProperties("Cli Installed", Object.keys(properties), [
      "userId_",
      "cliInvokedByCi"
    ]));
    // debug console in Avo
    if (!__AVO_NOOP__) {
      _avo_invoke(__AVO_ENV__, "JCwfVYXTS", "588b1f5190686099b083ad56d3fa443fd2f4c5558878d09a1ef5818f0c731f50", messages.map(function(m) { return Object.assign({}, {tag: m.tag, propertyId: m.propertyId, additionalProperties: m.additionalProperties, actualType: m.actualType}); }), 'event');
    }

    InternalAvoLogger.logEventSent("Cli Installed", {
      "Cli Invoked by Ci": properties.cliInvokedByCi,
      "Client": sysClient,
      "Version": sysVersion,
      }, {}, {});
    if (__AVO_DEV__ && (__STRICT__ === null || __STRICT__)) {
      // throw exception if messages is not empty
      if (messages.length !== 0) {
        throw new Error("Error sending event 'Cli Installed': " + messages[0].message)
      }
    } else {
      messages.forEach(function(m) {
        console[__REPORT_FAILURE_AS__ || 'error']("[avo] " + m.message);
      });
    }
  }

  if (!__AVO_NOOP__) {
    return Promise.all([
      // report to Avo Inspector
      __INSPECTOR__ != null ? __INSPECTOR__._avoFunctionTrackSchemaFromEvent("Cli Installed", {
        "Cli Invoked by Ci": properties.cliInvokedByCi,
        "Client": sysClient,
        "Version": sysVersion,
        }, "JCwfVYXTS", "588b1f5190686099b083ad56d3fa443fd2f4c5558878d09a1ef5818f0c731f50")
      : Promise.resolve(),
      // destination CustomNodeJS
      CustomNodeJS.logEvent(properties.userId_, "Cli Installed", {
        "Cli Invoked by Ci": properties.cliInvokedByCi,
        "Client": sysClient,
        "Version": sysVersion,
        }),
    ]);
  } else {
    // do nothing
    return new Promise((resolve) => { resolve(null); });
  }
}

/**
 * Cli Conflict Resolve Attempted: No description
 *
 * @param {object} properties - the properties associatied with this event
 * @param {string} properties.userId_ - User Id is required for server sources.
 * @param {bool} properties.cliInvokedByCi - True iff process.env.CI is set.
 * @param {string} properties.schemaId - The ID of the schema that this event is related to.
 * @param {string} properties.branchId - The ID of the branch that this event is related to.
 * @param {string} properties.branchName - The name of the branch that this event is related to.
 * @param {string} properties.schemaName - Name of the schema that this event is related to.
 *
 * @see {@link https://www.avo.app/schemas/fwtXqAc0fCLy7b7oGW40/events/Un5dTEMQYy}
 */
export function cliConflictResolveAttempted(properties) {
  properties = properties || {};
  if (__AVO_DEV__) {
    // assert properties
    var messages = [];
    messages = messages.concat(assertUserId_(properties.userId_));
    messages = messages.concat(assertCliInvokedByCi(properties.cliInvokedByCi));
    messages = messages.concat(assertSchemaId(properties.schemaId));
    messages = messages.concat(assertBranchId(properties.branchId));
    messages = messages.concat(assertBranchName(properties.branchName));
    messages = messages.concat(assertOptionalSchemaName(properties.schemaName));
    messages = messages.concat(assertClient(sysClient));
    messages = messages.concat(assertVersion(sysVersion));
    messages = messages.concat(AvoAssert.assertNoAdditionalProperties("Cli Conflict Resolve Attempted", Object.keys(properties), [
      "userId_",
      "cliInvokedByCi",
      "schemaId",
      "branchId",
      "branchName",
      "schemaName"
    ]));
    // debug console in Avo
    if (!__AVO_NOOP__) {
      _avo_invoke(__AVO_ENV__, "Un5dTEMQYy", "7404977817fc78c9c765838ebf115d8d684453662663c3947b3ebbc15154a3f7", messages.map(function(m) { return Object.assign({}, {tag: m.tag, propertyId: m.propertyId, additionalProperties: m.additionalProperties, actualType: m.actualType}); }), 'event');
    }

    InternalAvoLogger.logEventSent("Cli Conflict Resolve Attempted", {
      "Cli Invoked by Ci": properties.cliInvokedByCi,
      "Schema Id": properties.schemaId,
      "Branch Id": properties.branchId,
      "Branch Name": properties.branchName,
      "Schema Name": properties.schemaName,
      "Client": sysClient,
      "Version": sysVersion,
      }, {}, {});
    if (__AVO_DEV__ && (__STRICT__ === null || __STRICT__)) {
      // throw exception if messages is not empty
      if (messages.length !== 0) {
        throw new Error("Error sending event 'Cli Conflict Resolve Attempted': " + messages[0].message)
      }
    } else {
      messages.forEach(function(m) {
        console[__REPORT_FAILURE_AS__ || 'error']("[avo] " + m.message);
      });
    }
  }

  if (!__AVO_NOOP__) {
    return Promise.all([
      // report to Avo Inspector
      __INSPECTOR__ != null ? __INSPECTOR__._avoFunctionTrackSchemaFromEvent("Cli Conflict Resolve Attempted", {
        "Cli Invoked by Ci": properties.cliInvokedByCi,
        "Schema Id": properties.schemaId,
        "Branch Id": properties.branchId,
        "Branch Name": properties.branchName,
        "Schema Name": properties.schemaName,
        "Client": sysClient,
        "Version": sysVersion,
        }, "Un5dTEMQYy", "7404977817fc78c9c765838ebf115d8d684453662663c3947b3ebbc15154a3f7")
      : Promise.resolve(),
      // destination CustomNodeJS
      CustomNodeJS.logEvent(properties.userId_, "Cli Conflict Resolve Attempted", {
        "Cli Invoked by Ci": properties.cliInvokedByCi,
        "Schema Id": properties.schemaId,
        "Branch Id": properties.branchId,
        "Branch Name": properties.branchName,
        "Schema Name": properties.schemaName,
        "Client": sysClient,
        "Version": sysVersion,
        }),
    ]);
  } else {
    // do nothing
    return new Promise((resolve) => { resolve(null); });
  }
}

/**
 * Cli Conflict Resolve Failed: No description
 *
 * @param {object} properties - the properties associatied with this event
 * @param {string} properties.userId_ - User Id is required for server sources.
 * @param {bool} properties.cliInvokedByCi - True iff process.env.CI is set.
 * @param {string} properties.schemaId - The ID of the schema that this event is related to.
 * @param {string} properties.schemaName - Name of the schema that this event is related to.
 * @param {string} properties.branchId - The ID of the branch that this event is related to.
 * @param {string} properties.branchName - The name of the branch that this event is related to.
 *
 * @see {@link https://www.avo.app/schemas/fwtXqAc0fCLy7b7oGW40/events/4ZhoijIA2U}
 */
export function cliConflictResolveFailed(properties) {
  properties = properties || {};
  if (__AVO_DEV__) {
    // assert properties
    var messages = [];
    messages = messages.concat(assertUserId_(properties.userId_));
    messages = messages.concat(assertCliInvokedByCi(properties.cliInvokedByCi));
    messages = messages.concat(assertSchemaId(properties.schemaId));
    messages = messages.concat(assertOptionalSchemaName(properties.schemaName));
    messages = messages.concat(assertBranchId(properties.branchId));
    messages = messages.concat(assertBranchName(properties.branchName));
    messages = messages.concat(assertClient(sysClient));
    messages = messages.concat(assertVersion(sysVersion));
    messages = messages.concat(AvoAssert.assertNoAdditionalProperties("Cli Conflict Resolve Failed", Object.keys(properties), [
      "userId_",
      "cliInvokedByCi",
      "schemaId",
      "schemaName",
      "branchId",
      "branchName"
    ]));
    // debug console in Avo
    if (!__AVO_NOOP__) {
      _avo_invoke(__AVO_ENV__, "4ZhoijIA2U", "67b876f2a00dbd0b854836a8adfca0084118e427ce3332a428dbfc563dab8bc0", messages.map(function(m) { return Object.assign({}, {tag: m.tag, propertyId: m.propertyId, additionalProperties: m.additionalProperties, actualType: m.actualType}); }), 'event');
    }

    InternalAvoLogger.logEventSent("Cli Conflict Resolve Failed", {
      "Cli Invoked by Ci": properties.cliInvokedByCi,
      "Schema Id": properties.schemaId,
      "Schema Name": properties.schemaName,
      "Branch Id": properties.branchId,
      "Branch Name": properties.branchName,
      "Client": sysClient,
      "Version": sysVersion,
      }, {}, {});
    if (__AVO_DEV__ && (__STRICT__ === null || __STRICT__)) {
      // throw exception if messages is not empty
      if (messages.length !== 0) {
        throw new Error("Error sending event 'Cli Conflict Resolve Failed': " + messages[0].message)
      }
    } else {
      messages.forEach(function(m) {
        console[__REPORT_FAILURE_AS__ || 'error']("[avo] " + m.message);
      });
    }
  }

  if (!__AVO_NOOP__) {
    return Promise.all([
      // report to Avo Inspector
      __INSPECTOR__ != null ? __INSPECTOR__._avoFunctionTrackSchemaFromEvent("Cli Conflict Resolve Failed", {
        "Cli Invoked by Ci": properties.cliInvokedByCi,
        "Schema Id": properties.schemaId,
        "Schema Name": properties.schemaName,
        "Branch Id": properties.branchId,
        "Branch Name": properties.branchName,
        "Client": sysClient,
        "Version": sysVersion,
        }, "4ZhoijIA2U", "67b876f2a00dbd0b854836a8adfca0084118e427ce3332a428dbfc563dab8bc0")
      : Promise.resolve(),
      // destination CustomNodeJS
      CustomNodeJS.logEvent(properties.userId_, "Cli Conflict Resolve Failed", {
        "Cli Invoked by Ci": properties.cliInvokedByCi,
        "Schema Id": properties.schemaId,
        "Schema Name": properties.schemaName,
        "Branch Id": properties.branchId,
        "Branch Name": properties.branchName,
        "Client": sysClient,
        "Version": sysVersion,
        }),
    ]);
  } else {
    // do nothing
    return new Promise((resolve) => { resolve(null); });
  }
}

/**
 * Cli Conflict Resolve Succeeded: No description
 *
 * @param {object} properties - the properties associatied with this event
 * @param {string} properties.userId_ - User Id is required for server sources.
 * @param {bool} properties.cliInvokedByCi - True iff process.env.CI is set.
 * @param {string} properties.schemaId - The ID of the schema that this event is related to.
 * @param {string} properties.schemaName - Name of the schema that this event is related to.
 * @param {string} properties.branchId - The ID of the branch that this event is related to.
 * @param {string} properties.branchName - The name of the branch that this event is related to.
 *
 * @see {@link https://www.avo.app/schemas/fwtXqAc0fCLy7b7oGW40/events/yj_554q43i}
 */
export function cliConflictResolveSucceeded(properties) {
  properties = properties || {};
  if (__AVO_DEV__) {
    // assert properties
    var messages = [];
    messages = messages.concat(assertUserId_(properties.userId_));
    messages = messages.concat(assertCliInvokedByCi(properties.cliInvokedByCi));
    messages = messages.concat(assertSchemaId(properties.schemaId));
    messages = messages.concat(assertOptionalSchemaName(properties.schemaName));
    messages = messages.concat(assertBranchId(properties.branchId));
    messages = messages.concat(assertBranchName(properties.branchName));
    messages = messages.concat(assertClient(sysClient));
    messages = messages.concat(assertVersion(sysVersion));
    messages = messages.concat(AvoAssert.assertNoAdditionalProperties("Cli Conflict Resolve Succeeded", Object.keys(properties), [
      "userId_",
      "cliInvokedByCi",
      "schemaId",
      "schemaName",
      "branchId",
      "branchName"
    ]));
    // debug console in Avo
    if (!__AVO_NOOP__) {
      _avo_invoke(__AVO_ENV__, "yj_554q43i", "15ed68a02ce2178bd8be746d338dcec50f4e325069f03df6e5c164376fcb9c1f", messages.map(function(m) { return Object.assign({}, {tag: m.tag, propertyId: m.propertyId, additionalProperties: m.additionalProperties, actualType: m.actualType}); }), 'event');
    }

    InternalAvoLogger.logEventSent("Cli Conflict Resolve Succeeded", {
      "Cli Invoked by Ci": properties.cliInvokedByCi,
      "Schema Id": properties.schemaId,
      "Schema Name": properties.schemaName,
      "Branch Id": properties.branchId,
      "Branch Name": properties.branchName,
      "Client": sysClient,
      "Version": sysVersion,
      }, {}, {});
    if (__AVO_DEV__ && (__STRICT__ === null || __STRICT__)) {
      // throw exception if messages is not empty
      if (messages.length !== 0) {
        throw new Error("Error sending event 'Cli Conflict Resolve Succeeded': " + messages[0].message)
      }
    } else {
      messages.forEach(function(m) {
        console[__REPORT_FAILURE_AS__ || 'error']("[avo] " + m.message);
      });
    }
  }

  if (!__AVO_NOOP__) {
    return Promise.all([
      // report to Avo Inspector
      __INSPECTOR__ != null ? __INSPECTOR__._avoFunctionTrackSchemaFromEvent("Cli Conflict Resolve Succeeded", {
        "Cli Invoked by Ci": properties.cliInvokedByCi,
        "Schema Id": properties.schemaId,
        "Schema Name": properties.schemaName,
        "Branch Id": properties.branchId,
        "Branch Name": properties.branchName,
        "Client": sysClient,
        "Version": sysVersion,
        }, "yj_554q43i", "15ed68a02ce2178bd8be746d338dcec50f4e325069f03df6e5c164376fcb9c1f")
      : Promise.resolve(),
      // destination CustomNodeJS
      CustomNodeJS.logEvent(properties.userId_, "Cli Conflict Resolve Succeeded", {
        "Cli Invoked by Ci": properties.cliInvokedByCi,
        "Schema Id": properties.schemaId,
        "Schema Name": properties.schemaName,
        "Branch Id": properties.branchId,
        "Branch Name": properties.branchName,
        "Client": sysClient,
        "Version": sysVersion,
        }),
    ]);
  } else {
    // do nothing
    return new Promise((resolve) => { resolve(null); });
  }
}

export default {
  setAvoLogger: setAvoLogger,
  SignInError: SignInError,
  Client: Client,
  AuthenticationMethod: AuthenticationMethod,
  CliAction: CliAction,
  signedIn: signedIn,
  signInFailed: signInFailed,
  cliInvoked: cliInvoked,
  cliInstalled: cliInstalled,
  cliConflictResolveAttempted: cliConflictResolveAttempted,
  cliConflictResolveFailed: cliConflictResolveFailed,
  cliConflictResolveSucceeded: cliConflictResolveSucceeded,
  setSystemProperties: setSystemProperties,
  initAvo: initAvo,
  avoInspectorApiKey: avoInspectorApiKey,
}

// AVOMODULEMAP:"Avo"
// AVOEVENTMAP:["signedIn","signInFailed","cliInvoked","cliInstalled","cliConflictResolveAttempted","cliConflictResolveFailed","cliConflictResolveSucceeded"]
